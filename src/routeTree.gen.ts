/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as ForbiddenRouteImport } from './routes/forbidden'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LicenseIndexRouteImport } from './routes/license/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as VerifiedTestRouteImport } from './routes/verified/test'
import { Route as TestLicenseValidateRouteImport } from './routes/test/license-validate'
import { Route as LicenseSecurityTestRouteImport } from './routes/license/security-test'
import { Route as LicenseCreateAndActivateRouteImport } from './routes/license/create-and-activate'
import { Route as LicenseActivateRouteImport } from './routes/license/activate'
import { Route as AuthVerifyEmailRouteImport } from './routes/auth/verify-email'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminKeypoolRouteImport } from './routes/admin/keypool'
import { Route as AdminAnnouncementsRouteImport } from './routes/admin/announcements'
import { Route as LicenseLicensesIndexRouteImport } from './routes/license/licenses/index'
import { Route as AdminLicenseIndexRouteImport } from './routes/admin/license/index'
import { Route as AdminKeypoolCreateRouteImport } from './routes/admin/keypool/create'
import { Route as AdminLicenseActivationCodesIndexRouteImport } from './routes/admin/license/activation-codes/index'
import { Route as AdminLicenseActivationCodesCreateRouteImport } from './routes/admin/license/activation-codes/create'
import { Route as AdminKeypoolKeyIdEditRouteImport } from './routes/admin/keypool/$keyId/edit'
import { Route as AdminLicenseActivationCodesCodeIdEditRouteImport } from './routes/admin/license/activation-codes/$codeId/edit'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const ForbiddenRoute = ForbiddenRouteImport.update({
  id: '/forbidden',
  path: '/forbidden',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LicenseIndexRoute = LicenseIndexRouteImport.update({
  id: '/license/',
  path: '/license/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const VerifiedTestRoute = VerifiedTestRouteImport.update({
  id: '/verified/test',
  path: '/verified/test',
  getParentRoute: () => rootRouteImport,
} as any)
const TestLicenseValidateRoute = TestLicenseValidateRouteImport.update({
  id: '/test/license-validate',
  path: '/test/license-validate',
  getParentRoute: () => rootRouteImport,
} as any)
const LicenseSecurityTestRoute = LicenseSecurityTestRouteImport.update({
  id: '/license/security-test',
  path: '/license/security-test',
  getParentRoute: () => rootRouteImport,
} as any)
const LicenseCreateAndActivateRoute =
  LicenseCreateAndActivateRouteImport.update({
    id: '/license/create-and-activate',
    path: '/license/create-and-activate',
    getParentRoute: () => rootRouteImport,
  } as any)
const LicenseActivateRoute = LicenseActivateRouteImport.update({
  id: '/license/activate',
  path: '/license/activate',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthVerifyEmailRoute = AuthVerifyEmailRouteImport.update({
  id: '/auth/verify-email',
  path: '/auth/verify-email',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminKeypoolRoute = AdminKeypoolRouteImport.update({
  id: '/keypool',
  path: '/keypool',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAnnouncementsRoute = AdminAnnouncementsRouteImport.update({
  id: '/announcements',
  path: '/announcements',
  getParentRoute: () => AdminRoute,
} as any)
const LicenseLicensesIndexRoute = LicenseLicensesIndexRouteImport.update({
  id: '/license/licenses/',
  path: '/license/licenses/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLicenseIndexRoute = AdminLicenseIndexRouteImport.update({
  id: '/license/',
  path: '/license/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminKeypoolCreateRoute = AdminKeypoolCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AdminKeypoolRoute,
} as any)
const AdminLicenseActivationCodesIndexRoute =
  AdminLicenseActivationCodesIndexRouteImport.update({
    id: '/license/activation-codes/',
    path: '/license/activation-codes/',
    getParentRoute: () => AdminRoute,
  } as any)
const AdminLicenseActivationCodesCreateRoute =
  AdminLicenseActivationCodesCreateRouteImport.update({
    id: '/license/activation-codes/create',
    path: '/license/activation-codes/create',
    getParentRoute: () => AdminRoute,
  } as any)
const AdminKeypoolKeyIdEditRoute = AdminKeypoolKeyIdEditRouteImport.update({
  id: '/$keyId/edit',
  path: '/$keyId/edit',
  getParentRoute: () => AdminKeypoolRoute,
} as any)
const AdminLicenseActivationCodesCodeIdEditRoute =
  AdminLicenseActivationCodesCodeIdEditRouteImport.update({
    id: '/license/activation-codes/$codeId/edit',
    path: '/license/activation-codes/$codeId/edit',
    getParentRoute: () => AdminRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/forbidden': typeof ForbiddenRoute
  '/profile': typeof ProfileRoute
  '/admin/announcements': typeof AdminAnnouncementsRoute
  '/admin/keypool': typeof AdminKeypoolRouteWithChildren
  '/admin/users': typeof AdminUsersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/license/activate': typeof LicenseActivateRoute
  '/license/create-and-activate': typeof LicenseCreateAndActivateRoute
  '/license/security-test': typeof LicenseSecurityTestRoute
  '/test/license-validate': typeof TestLicenseValidateRoute
  '/verified/test': typeof VerifiedTestRoute
  '/admin/': typeof AdminIndexRoute
  '/license': typeof LicenseIndexRoute
  '/admin/keypool/create': typeof AdminKeypoolCreateRoute
  '/admin/license': typeof AdminLicenseIndexRoute
  '/license/licenses': typeof LicenseLicensesIndexRoute
  '/admin/keypool/$keyId/edit': typeof AdminKeypoolKeyIdEditRoute
  '/admin/license/activation-codes/create': typeof AdminLicenseActivationCodesCreateRoute
  '/admin/license/activation-codes': typeof AdminLicenseActivationCodesIndexRoute
  '/admin/license/activation-codes/$codeId/edit': typeof AdminLicenseActivationCodesCodeIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/forbidden': typeof ForbiddenRoute
  '/profile': typeof ProfileRoute
  '/admin/announcements': typeof AdminAnnouncementsRoute
  '/admin/keypool': typeof AdminKeypoolRouteWithChildren
  '/admin/users': typeof AdminUsersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/license/activate': typeof LicenseActivateRoute
  '/license/create-and-activate': typeof LicenseCreateAndActivateRoute
  '/license/security-test': typeof LicenseSecurityTestRoute
  '/test/license-validate': typeof TestLicenseValidateRoute
  '/verified/test': typeof VerifiedTestRoute
  '/admin': typeof AdminIndexRoute
  '/license': typeof LicenseIndexRoute
  '/admin/keypool/create': typeof AdminKeypoolCreateRoute
  '/admin/license': typeof AdminLicenseIndexRoute
  '/license/licenses': typeof LicenseLicensesIndexRoute
  '/admin/keypool/$keyId/edit': typeof AdminKeypoolKeyIdEditRoute
  '/admin/license/activation-codes/create': typeof AdminLicenseActivationCodesCreateRoute
  '/admin/license/activation-codes': typeof AdminLicenseActivationCodesIndexRoute
  '/admin/license/activation-codes/$codeId/edit': typeof AdminLicenseActivationCodesCodeIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/forbidden': typeof ForbiddenRoute
  '/profile': typeof ProfileRoute
  '/admin/announcements': typeof AdminAnnouncementsRoute
  '/admin/keypool': typeof AdminKeypoolRouteWithChildren
  '/admin/users': typeof AdminUsersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/license/activate': typeof LicenseActivateRoute
  '/license/create-and-activate': typeof LicenseCreateAndActivateRoute
  '/license/security-test': typeof LicenseSecurityTestRoute
  '/test/license-validate': typeof TestLicenseValidateRoute
  '/verified/test': typeof VerifiedTestRoute
  '/admin/': typeof AdminIndexRoute
  '/license/': typeof LicenseIndexRoute
  '/admin/keypool/create': typeof AdminKeypoolCreateRoute
  '/admin/license/': typeof AdminLicenseIndexRoute
  '/license/licenses/': typeof LicenseLicensesIndexRoute
  '/admin/keypool/$keyId/edit': typeof AdminKeypoolKeyIdEditRoute
  '/admin/license/activation-codes/create': typeof AdminLicenseActivationCodesCreateRoute
  '/admin/license/activation-codes/': typeof AdminLicenseActivationCodesIndexRoute
  '/admin/license/activation-codes/$codeId/edit': typeof AdminLicenseActivationCodesCodeIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/forbidden'
    | '/profile'
    | '/admin/announcements'
    | '/admin/keypool'
    | '/admin/users'
    | '/auth/login'
    | '/auth/register'
    | '/auth/verify-email'
    | '/license/activate'
    | '/license/create-and-activate'
    | '/license/security-test'
    | '/test/license-validate'
    | '/verified/test'
    | '/admin/'
    | '/license'
    | '/admin/keypool/create'
    | '/admin/license'
    | '/license/licenses'
    | '/admin/keypool/$keyId/edit'
    | '/admin/license/activation-codes/create'
    | '/admin/license/activation-codes'
    | '/admin/license/activation-codes/$codeId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/forbidden'
    | '/profile'
    | '/admin/announcements'
    | '/admin/keypool'
    | '/admin/users'
    | '/auth/login'
    | '/auth/register'
    | '/auth/verify-email'
    | '/license/activate'
    | '/license/create-and-activate'
    | '/license/security-test'
    | '/test/license-validate'
    | '/verified/test'
    | '/admin'
    | '/license'
    | '/admin/keypool/create'
    | '/admin/license'
    | '/license/licenses'
    | '/admin/keypool/$keyId/edit'
    | '/admin/license/activation-codes/create'
    | '/admin/license/activation-codes'
    | '/admin/license/activation-codes/$codeId/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/dashboard'
    | '/forbidden'
    | '/profile'
    | '/admin/announcements'
    | '/admin/keypool'
    | '/admin/users'
    | '/auth/login'
    | '/auth/register'
    | '/auth/verify-email'
    | '/license/activate'
    | '/license/create-and-activate'
    | '/license/security-test'
    | '/test/license-validate'
    | '/verified/test'
    | '/admin/'
    | '/license/'
    | '/admin/keypool/create'
    | '/admin/license/'
    | '/license/licenses/'
    | '/admin/keypool/$keyId/edit'
    | '/admin/license/activation-codes/create'
    | '/admin/license/activation-codes/'
    | '/admin/license/activation-codes/$codeId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  ForbiddenRoute: typeof ForbiddenRoute
  ProfileRoute: typeof ProfileRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute
  LicenseActivateRoute: typeof LicenseActivateRoute
  LicenseCreateAndActivateRoute: typeof LicenseCreateAndActivateRoute
  LicenseSecurityTestRoute: typeof LicenseSecurityTestRoute
  TestLicenseValidateRoute: typeof TestLicenseValidateRoute
  VerifiedTestRoute: typeof VerifiedTestRoute
  LicenseIndexRoute: typeof LicenseIndexRoute
  LicenseLicensesIndexRoute: typeof LicenseLicensesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forbidden': {
      id: '/forbidden'
      path: '/forbidden'
      fullPath: '/forbidden'
      preLoaderRoute: typeof ForbiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/license/': {
      id: '/license/'
      path: '/license'
      fullPath: '/license'
      preLoaderRoute: typeof LicenseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/verified/test': {
      id: '/verified/test'
      path: '/verified/test'
      fullPath: '/verified/test'
      preLoaderRoute: typeof VerifiedTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/license-validate': {
      id: '/test/license-validate'
      path: '/test/license-validate'
      fullPath: '/test/license-validate'
      preLoaderRoute: typeof TestLicenseValidateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/license/security-test': {
      id: '/license/security-test'
      path: '/license/security-test'
      fullPath: '/license/security-test'
      preLoaderRoute: typeof LicenseSecurityTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/license/create-and-activate': {
      id: '/license/create-and-activate'
      path: '/license/create-and-activate'
      fullPath: '/license/create-and-activate'
      preLoaderRoute: typeof LicenseCreateAndActivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/license/activate': {
      id: '/license/activate'
      path: '/license/activate'
      fullPath: '/license/activate'
      preLoaderRoute: typeof LicenseActivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/auth/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/keypool': {
      id: '/admin/keypool'
      path: '/keypool'
      fullPath: '/admin/keypool'
      preLoaderRoute: typeof AdminKeypoolRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/announcements': {
      id: '/admin/announcements'
      path: '/announcements'
      fullPath: '/admin/announcements'
      preLoaderRoute: typeof AdminAnnouncementsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/license/licenses/': {
      id: '/license/licenses/'
      path: '/license/licenses'
      fullPath: '/license/licenses'
      preLoaderRoute: typeof LicenseLicensesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/license/': {
      id: '/admin/license/'
      path: '/license'
      fullPath: '/admin/license'
      preLoaderRoute: typeof AdminLicenseIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/keypool/create': {
      id: '/admin/keypool/create'
      path: '/create'
      fullPath: '/admin/keypool/create'
      preLoaderRoute: typeof AdminKeypoolCreateRouteImport
      parentRoute: typeof AdminKeypoolRoute
    }
    '/admin/license/activation-codes/': {
      id: '/admin/license/activation-codes/'
      path: '/license/activation-codes'
      fullPath: '/admin/license/activation-codes'
      preLoaderRoute: typeof AdminLicenseActivationCodesIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/license/activation-codes/create': {
      id: '/admin/license/activation-codes/create'
      path: '/license/activation-codes/create'
      fullPath: '/admin/license/activation-codes/create'
      preLoaderRoute: typeof AdminLicenseActivationCodesCreateRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/keypool/$keyId/edit': {
      id: '/admin/keypool/$keyId/edit'
      path: '/$keyId/edit'
      fullPath: '/admin/keypool/$keyId/edit'
      preLoaderRoute: typeof AdminKeypoolKeyIdEditRouteImport
      parentRoute: typeof AdminKeypoolRoute
    }
    '/admin/license/activation-codes/$codeId/edit': {
      id: '/admin/license/activation-codes/$codeId/edit'
      path: '/license/activation-codes/$codeId/edit'
      fullPath: '/admin/license/activation-codes/$codeId/edit'
      preLoaderRoute: typeof AdminLicenseActivationCodesCodeIdEditRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminKeypoolRouteChildren {
  AdminKeypoolCreateRoute: typeof AdminKeypoolCreateRoute
  AdminKeypoolKeyIdEditRoute: typeof AdminKeypoolKeyIdEditRoute
}

const AdminKeypoolRouteChildren: AdminKeypoolRouteChildren = {
  AdminKeypoolCreateRoute: AdminKeypoolCreateRoute,
  AdminKeypoolKeyIdEditRoute: AdminKeypoolKeyIdEditRoute,
}

const AdminKeypoolRouteWithChildren = AdminKeypoolRoute._addFileChildren(
  AdminKeypoolRouteChildren,
)

interface AdminRouteChildren {
  AdminAnnouncementsRoute: typeof AdminAnnouncementsRoute
  AdminKeypoolRoute: typeof AdminKeypoolRouteWithChildren
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminLicenseIndexRoute: typeof AdminLicenseIndexRoute
  AdminLicenseActivationCodesCreateRoute: typeof AdminLicenseActivationCodesCreateRoute
  AdminLicenseActivationCodesIndexRoute: typeof AdminLicenseActivationCodesIndexRoute
  AdminLicenseActivationCodesCodeIdEditRoute: typeof AdminLicenseActivationCodesCodeIdEditRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAnnouncementsRoute: AdminAnnouncementsRoute,
  AdminKeypoolRoute: AdminKeypoolRouteWithChildren,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminLicenseIndexRoute: AdminLicenseIndexRoute,
  AdminLicenseActivationCodesCreateRoute:
    AdminLicenseActivationCodesCreateRoute,
  AdminLicenseActivationCodesIndexRoute: AdminLicenseActivationCodesIndexRoute,
  AdminLicenseActivationCodesCodeIdEditRoute:
    AdminLicenseActivationCodesCodeIdEditRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  DashboardRoute: DashboardRoute,
  ForbiddenRoute: ForbiddenRoute,
  ProfileRoute: ProfileRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
  LicenseActivateRoute: LicenseActivateRoute,
  LicenseCreateAndActivateRoute: LicenseCreateAndActivateRoute,
  LicenseSecurityTestRoute: LicenseSecurityTestRoute,
  TestLicenseValidateRoute: TestLicenseValidateRoute,
  VerifiedTestRoute: VerifiedTestRoute,
  LicenseIndexRoute: LicenseIndexRoute,
  LicenseLicensesIndexRoute: LicenseLicensesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
